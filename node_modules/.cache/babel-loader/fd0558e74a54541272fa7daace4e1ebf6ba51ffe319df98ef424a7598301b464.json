{"ast":null,"code":"import L from 'leaflet';\nexport default {\n  name: 'App',\n  mounted() {\n    this.initMap();\n    window.addEventListener('resize', this.handleResize);\n  },\n  methods: {\n    initMap() {\n      this.map = L.map('map').setView([48.8566, 2.3522], this.calculateZoom());\n\n      // Utilisation du fond de carte Jawg.light\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\n      }).addTo(this.map);\n\n      // Écouter le changement de taille de la fenêtre\n      window.addEventListener('resize', this.handleResize);\n    },\n    calculateZoom() {\n      // Calculer le niveau de zoom en fonction de la hauteur de la fenêtre\n      const windowHeight = window.innerHeight;\n      const minZoomHeight = 400; // Hauteur minimale de la carte pour autoriser le zoom\n      const zoomLevels = 10; // Nombre de niveaux de zoom\n\n      // Calculer le zoom nécessaire pour remplir la fenêtre\n      let zoom = 2; // Niveau de zoom initial\n      while (zoom < zoomLevels && windowHeight > minZoomHeight) {\n        windowHeight /= 2;\n        zoom++;\n      }\n\n      // Retourner le niveau de zoom calculé\n      return zoom;\n    },\n    handleResize() {\n      // Mettre à jour le niveau de zoom lorsque la fenêtre est redimensionnée\n      this.map.setZoom(this.calculateZoom());\n    }\n  },\n  beforeDestroy() {\n    // Nettoyer les écouteurs d'événements lors de la destruction du composant\n    window.removeEventListener('resize', this.handleResize);\n  }\n};","map":{"version":3,"names":["L","name","mounted","initMap","window","addEventListener","handleResize","methods","map","setView","calculateZoom","tileLayer","attribution","maxZoom","accessToken","addTo","windowHeight","innerHeight","minZoomHeight","zoomLevels","zoom","setZoom","beforeDestroy","removeEventListener"],"sources":["C:\\Users\\Mohamed\\Desktop\\code\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\n\r\nexport default {\r\n  name: 'App',\r\n  mounted() {\r\n    this.initMap();\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([48.8566, 2.3522], this.calculateZoom());\r\n\r\n      // Utilisation du fond de carte Jawg.light\r\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\r\n      }).addTo(this.map);\r\n\r\n      // Écouter le changement de taille de la fenêtre\r\n      window.addEventListener('resize', this.handleResize);\r\n    },\r\n    calculateZoom() {\r\n      // Calculer le niveau de zoom en fonction de la hauteur de la fenêtre\r\n      const windowHeight = window.innerHeight;\r\n      const minZoomHeight = 400; // Hauteur minimale de la carte pour autoriser le zoom\r\n      const zoomLevels = 10; // Nombre de niveaux de zoom\r\n\r\n      // Calculer le zoom nécessaire pour remplir la fenêtre\r\n      let zoom = 2; // Niveau de zoom initial\r\n      while (zoom < zoomLevels && windowHeight > minZoomHeight) {\r\n        windowHeight /= 2;\r\n        zoom++;\r\n      }\r\n\r\n      // Retourner le niveau de zoom calculé\r\n      return zoom;\r\n    },\r\n    handleResize() {\r\n      // Mettre à jour le niveau de zoom lorsque la fenêtre est redimensionnée\r\n      this.map.setZoom(this.calculateZoom());\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // Nettoyer les écouteurs d'événements lors de la destruction du composant\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n</style>\r\n"],"mappings":"AAKA,OAAOA,CAAA,MAAO,SAAS;AAEvB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACdC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;EACtD,CAAC;EACDC,OAAO,EAAE;IACPJ,OAAOA,CAAA,EAAG;MACR,IAAI,CAACK,GAAE,GAAIR,CAAC,CAACQ,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC,CAAC;;MAExE;MACAV,CAAC,CAACW,SAAS,CAAC,4EAA4E,EAAE;QACxFC,WAAW,EAAE,mJAAmJ;QAChKC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,kEAAiE,CAAE;MAClF,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACP,GAAG,CAAC;;MAElB;MACAJ,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;IACtD,CAAC;IACDI,aAAaA,CAAA,EAAG;MACd;MACA,MAAMM,YAAW,GAAIZ,MAAM,CAACa,WAAW;MACvC,MAAMC,aAAY,GAAI,GAAG,EAAE;MAC3B,MAAMC,UAAS,GAAI,EAAE,EAAE;;MAEvB;MACA,IAAIC,IAAG,GAAI,CAAC,EAAE;MACd,OAAOA,IAAG,GAAID,UAAS,IAAKH,YAAW,GAAIE,aAAa,EAAE;QACxDF,YAAW,IAAK,CAAC;QACjBI,IAAI,EAAE;MACR;;MAEA;MACA,OAAOA,IAAI;IACb,CAAC;IACDd,YAAYA,CAAA,EAAG;MACb;MACA,IAAI,CAACE,GAAG,CAACa,OAAO,CAAC,IAAI,CAACX,aAAa,CAAC,CAAC,CAAC;IACxC;EACF,CAAC;EACDY,aAAaA,CAAA,EAAG;IACd;IACAlB,MAAM,CAACmB,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACjB,YAAY,CAAC;EACzD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}