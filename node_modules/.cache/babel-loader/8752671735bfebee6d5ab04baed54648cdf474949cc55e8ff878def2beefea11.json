{"ast":null,"code":"import L from 'leaflet';\nexport default {\n  name: 'App',\n  data() {\n    return {\n      map: null,\n      maxZoom: 18 // Zoom maximal par défaut\n    };\n  },\n  mounted() {\n    this.initMap();\n    window.addEventListener('resize', this.handleResize);\n  },\n  methods: {\n    initMap() {\n      this.map = L.map('map').setView([48.8566, 2.3522], 2);\n\n      // Utilisation du fond de carte Jawg.light\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: this.maxZoom,\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\n      }).addTo(this.map);\n\n      // Écouter le changement de taille de la fenêtre\n      window.addEventListener('resize', this.handleResize);\n    },\n    handleResize() {\n      // Mettre à jour le niveau de zoom lorsque la fenêtre est redimensionnée\n      this.map.setZoom(this.calculateZoom());\n    },\n    calculateZoom() {\n      const windowHeight = window.innerHeight;\n      const mapHeight = this.$el.clientHeight;\n      const minZoomHeight = 400; // Hauteur minimale de la carte pour autoriser le zoom\n\n      let zoom = 2;\n      let currentHeight = mapHeight;\n      while (currentHeight < windowHeight && currentHeight > minZoomHeight && zoom < this.maxZoom) {\n        currentHeight *= 2;\n        zoom++;\n      }\n      return zoom;\n    }\n  },\n  beforeUnmount() {\n    // Nettoyer les écouteurs d'événements lors de la destruction du composant\n    window.removeEventListener('resize', this.handleResize);\n  }\n};","map":{"version":3,"names":["L","name","data","map","maxZoom","mounted","initMap","window","addEventListener","handleResize","methods","setView","tileLayer","attribution","accessToken","addTo","setZoom","calculateZoom","windowHeight","innerHeight","mapHeight","$el","clientHeight","minZoomHeight","zoom","currentHeight","beforeUnmount","removeEventListener"],"sources":["C:\\Users\\Mohamed\\Desktop\\code\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\n\r\nexport default {\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      map: null,\r\n      maxZoom: 18 // Zoom maximal par défaut\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([48.8566, 2.3522], 2);\r\n\r\n      // Utilisation du fond de carte Jawg.light\r\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        maxZoom: this.maxZoom,\r\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\r\n      }).addTo(this.map);\r\n\r\n      // Écouter le changement de taille de la fenêtre\r\n      window.addEventListener('resize', this.handleResize);\r\n    },\r\n    handleResize() {\r\n      // Mettre à jour le niveau de zoom lorsque la fenêtre est redimensionnée\r\n      this.map.setZoom(this.calculateZoom());\r\n    },\r\n    calculateZoom() {\r\n      const windowHeight = window.innerHeight;\r\n      const mapHeight = this.$el.clientHeight;\r\n      const minZoomHeight = 400; // Hauteur minimale de la carte pour autoriser le zoom\r\n\r\n      let zoom = 2;\r\n      let currentHeight = mapHeight;\r\n      while (currentHeight < windowHeight && currentHeight > minZoomHeight && zoom < this.maxZoom) {\r\n        currentHeight *= 2;\r\n        zoom++;\r\n      }\r\n\r\n      return zoom;\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    // Nettoyer les écouteurs d'événements lors de la destruction du composant\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n</style>\r\n"],"mappings":"AAKA,OAAOA,CAAA,MAAO,SAAS;AAEvB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,OAAO,EAAE,EAAC,CAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACdC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;EACtD,CAAC;EACDC,OAAO,EAAE;IACPJ,OAAOA,CAAA,EAAG;MACR,IAAI,CAACH,GAAE,GAAIH,CAAC,CAACG,GAAG,CAAC,KAAK,CAAC,CAACQ,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;;MAErD;MACAX,CAAC,CAACY,SAAS,CAAC,4EAA4E,EAAE;QACxFC,WAAW,EAAE,mJAAmJ;QAChKT,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBU,WAAW,EAAE,kEAAiE,CAAE;MAClF,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACZ,GAAG,CAAC;;MAElB;MACAI,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;IACtD,CAAC;IACDA,YAAYA,CAAA,EAAG;MACb;MACA,IAAI,CAACN,GAAG,CAACa,OAAO,CAAC,IAAI,CAACC,aAAa,CAAC,CAAC,CAAC;IACxC,CAAC;IACDA,aAAaA,CAAA,EAAG;MACd,MAAMC,YAAW,GAAIX,MAAM,CAACY,WAAW;MACvC,MAAMC,SAAQ,GAAI,IAAI,CAACC,GAAG,CAACC,YAAY;MACvC,MAAMC,aAAY,GAAI,GAAG,EAAE;;MAE3B,IAAIC,IAAG,GAAI,CAAC;MACZ,IAAIC,aAAY,GAAIL,SAAS;MAC7B,OAAOK,aAAY,GAAIP,YAAW,IAAKO,aAAY,GAAIF,aAAY,IAAKC,IAAG,GAAI,IAAI,CAACpB,OAAO,EAAE;QAC3FqB,aAAY,IAAK,CAAC;QAClBD,IAAI,EAAE;MACR;MAEA,OAAOA,IAAI;IACb;EACF,CAAC;EACDE,aAAaA,CAAA,EAAG;IACd;IACAnB,MAAM,CAACoB,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAClB,YAAY,CAAC;EACzD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}