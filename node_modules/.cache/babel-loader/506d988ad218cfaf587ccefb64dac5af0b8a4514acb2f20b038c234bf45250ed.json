{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"map\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\robba\\VueProjects\\Gourmet_Atlas-Project-main\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  data() {\r\n    return {\r\n      meals: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchMeals();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map(\"map\").setView([0, 0], 2);\r\n\r\n      L.tileLayer(\r\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\r\n        {\r\n          attribution:\r\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n          maxZoom: 18,\r\n          accessToken:\r\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\r\n        }\r\n      ).addTo(this.map);\r\n    },\r\n    async fetchMeals() {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood\" // Remplacez \"Seafood\" par le type de plat souhaité\r\n        );\r\n        const mealsData = await response.json();\r\n        this.meals = mealsData.meals;\r\n        this.displayMeals();\r\n      } catch (error) {\r\n        console.error(\"Error fetching meals:\", error);\r\n      }\r\n    },\r\n    async displayMeals() {\r\n  async displayMeals() {\r\n  for (const meal of this.meals) {\r\n    const mealName = meal.strMeal;\r\n    const mealImage = meal.strMealThumb;\r\n    const mealCountry = meal.strArea;\r\n\r\n    const countryCoordinates = await this.fetchCountryCoordinates(\r\n      mealCountry\r\n    );\r\n\r\n    // Afficher les coordonnées récupérées dans la console\r\n    console.log(`Coordinates for ${mealName}:`, countryCoordinates);\r\n\r\n    // Reste du code pour placer le marqueur...\r\n  }\r\n}\r\n\r\n    },\r\n    async fetchCountryCoordinates(countryName) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          return { latlng: [lat, lon] };\r\n        } else {\r\n          throw new Error(\"Country coordinates not found or invalid response\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching country coordinates:\", error);\r\n        return { latlng: [0, 0] };\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\nD\r\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;uBAAbC,mBAAA,CAAoB,OAApBC,UAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}