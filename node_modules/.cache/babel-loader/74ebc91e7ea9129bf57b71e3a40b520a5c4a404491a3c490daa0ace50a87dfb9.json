{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"map\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Mohamed\\Desktop\\code\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\n\r\nasync function fetchPlates() {\r\n    const plates = [];\r\n    \r\n    // Fetching plates data\r\n    let nextPage = 'https://worldfood.guide/api/photos/';\r\n    while (plates.length < 1000 && nextPage) {\r\n        const response = await fetch(nextPage);\r\n        const data = await response.json();\r\n        nextPage = data.next;\r\n        \r\n        data.results.forEach(result => {\r\n            const plateName = result.dish_name;\r\n            const plateImage = result.location;\r\n            plates.push({ name: plateName, image: plateImage });\r\n        });\r\n    }\r\n    \r\n    // Fetching details for each plate\r\n    for (const plate of plates) {\r\n        const response = await fetchPlateDetails(plate.name);\r\n        plate.location = response.location; // Assuming the location is fetched from the details API\r\n    }\r\n    \r\n    return plates;\r\n}\r\n\r\nasync function fetchPlateDetails(plateName) {\r\n    const response = await fetch(`https://worldfood.guide/api/plate-details/?name=${encodeURIComponent(plateName)}`);\r\n    return await response.json();\r\n}\r\n\r\nasync function main() {\r\n    const plates = await fetchPlates();\r\n    console.log(plates); // This will log the array of plates with their names, images, and locations\r\n}\r\n\r\nmain();\r\n\r\nimport L from 'leaflet';\r\n\r\nexport default {\r\n  name: 'App',\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchDishes();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([0, 0], 2); // Position initiale de la carte\r\n\r\n      // Ajout du fond de carte Jawg.light\r\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\r\n      }).addTo(this.map);\r\n    },\r\n    async fetchDishes() {\r\n      try {\r\n        // Faites une requête à l'API pour récupérer les données des plats\r\n        const response = await fetch('https://worldfoodguide/api/photos/');\r\n        const dishes = await response.json(); // Convertir la réponse en JSON\r\n\r\n        // Placez les marqueurs sur la carte pour chaque plat\r\n        dishes.forEach(dish => {\r\n          if (dish.location) {\r\n            const name = dish.name;\r\n            const image = dish.image;\r\n            const location = [dish.location.latitude, dish.location.longitude];\r\n\r\n            const markerIcon = L.icon({\r\n              iconUrl: image,\r\n              iconSize: [40, 40],\r\n              iconAnchor: [20, 40],\r\n              popupAnchor: [0, -40]\r\n            });\r\n\r\n            L.marker(location, { icon: markerIcon })\r\n              .addTo(this.map)\r\n              .bindPopup(`<b>${name}</b><br><img src=\"${image}\" alt=\"${name}\" style=\"max-width: 100px;\">`);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching dishes:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;uBAAbC,mBAAA,CAAoB,OAApBC,UAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}