{"ast":null,"code":"import L from \"leaflet\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: []\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 2,\n        maxBounds: [\n        // Définir les limites de vue sur la carte\n        [-90, -180],\n        // Coin sud-ouest\n        [90, 180] // Coin nord-est\n        ],\n        maxBoundsViscosity: 1.0 // Assurez-vous que les limites sont respectées lors du zoom/défilement\n      });\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n    },\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\");\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n        const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\n\n        // Afficher les coordonnées récupérées dans la console\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        // Vérifier si les coordonnées sont valides avant d'ajouter le marqueur\n        if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n          const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\n          const markerIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40]\n          });\n          L.marker(mealLocation, {\n            icon: markerIcon\n          }).addTo(this.map).bindPopup(`<b>${mealName}</b><br><img src=\"${mealImage}\" alt=\"${mealName}\" style=\"max-width: 100px;\">`);\n        }\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          return {\n            latlng: [lat, lon]\n          };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return {\n          latlng: [0, 0]\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","name","data","meals","mounted","initMap","fetchPastaMeals","methods","map","center","zoom","maxBounds","maxBoundsViscosity","tileLayer","attribution","maxZoom","accessToken","addTo","response","fetch","mealsData","json","displayMeals","error","console","meal","mealName","strMeal","mealImage","strMealThumb","mealCountry","strArea","countryCoordinates","fetchCountryCoordinates","log","latlng","mealLocation","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","bindPopup","countryName","length","lat","lon","Error"],"sources":["C:\\Users\\robba\\VueProjects\\Gourmet_Atlas-Project-main\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  data() {\r\n    return {\r\n      meals: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchPastaMeals();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map(\"map\", {\r\n        center: [0, 0],\r\n        zoom: 2,\r\n        maxBounds: [\r\n          // Définir les limites de vue sur la carte\r\n          [-90, -180], // Coin sud-ouest\r\n          [90, 180], // Coin nord-est\r\n        ],\r\n        maxBoundsViscosity: 1.0, // Assurez-vous que les limites sont respectées lors du zoom/défilement\r\n      });\r\n\r\n      L.tileLayer(\r\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\r\n        {\r\n          attribution:\r\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n          maxZoom: 18,\r\n          accessToken:\r\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\r\n        }\r\n      ).addTo(this.map);\r\n\r\n      L.tileLayer(\r\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\r\n        {\r\n          attribution:\r\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n          maxZoom: 18,\r\n          accessToken:\r\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\r\n        }\r\n      ).addTo(this.map);\r\n    },\r\n    async fetchPastaMeals() {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\r\n        );\r\n        const mealsData = await response.json();\r\n        this.meals = mealsData.meals;\r\n        this.displayMeals();\r\n      } catch (error) {\r\n        console.error(\"Error fetching pasta meals:\", error);\r\n      }\r\n    },\r\n    async displayMeals() {\r\n      for (const meal of this.meals) {\r\n        const mealName = meal.strMeal;\r\n        const mealImage = meal.strMealThumb;\r\n        const mealCountry = meal.strArea;\r\n\r\n        const countryCoordinates = await this.fetchCountryCoordinates(\r\n          mealCountry\r\n        );\r\n\r\n        // Afficher les coordonnées récupérées dans la console\r\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\r\n\r\n        // Vérifier si les coordonnées sont valides avant d'ajouter le marqueur\r\n        if (\r\n          countryCoordinates.latlng[0] !== 0 ||\r\n          countryCoordinates.latlng[1] !== 0\r\n        ) {\r\n          const mealLocation = [\r\n            countryCoordinates.latlng[0],\r\n            countryCoordinates.latlng[1],\r\n          ];\r\n\r\n          const markerIcon = L.icon({\r\n            iconUrl: mealImage,\r\n            iconSize: [40, 40],\r\n            iconAnchor: [20, 40],\r\n            popupAnchor: [0, -40],\r\n          });\r\n\r\n          L.marker(mealLocation, { icon: markerIcon })\r\n            .addTo(this.map)\r\n            .bindPopup(\r\n              `<b>${mealName}</b><br><img src=\"${mealImage}\" alt=\"${mealName}\" style=\"max-width: 100px;\">`\r\n            );\r\n        }\r\n      }\r\n    },\r\n    async fetchCountryCoordinates(countryName) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          return { latlng: [lat, lon] };\r\n        } else {\r\n          throw new Error(\"Country coordinates not found or invalid response\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching country coordinates:\", error);\r\n        return { latlng: [0, 0] };\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}