{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../public/logo.png';\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"header\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  class: \"logo\"\n})], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\"\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","src","alt","class","id","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\n        );\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = await this.fetchMealCountry(mealName);\n\n        // Convertir l'origine du plat en nom de pays\n        const countryName = this.convertToCountry(mealCountry);\n\n        // Afficher le pays d'origine dans la console\n        console.log(`Country for ${mealName}:`, countryName);\n\n        const countryCoordinates = await this.fetchCountryCoordinates(\n          countryName\n        );\n\n        // Afficher les coordonnées récupérées dans la console\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        // Vérifier si les coordonnées sont valides avant d'ajouter le marqueur\n        if (\n          countryCoordinates.latlng[0] !== 0 ||\n          countryCoordinates.latlng[1] !== 0\n        ) {\n          let mealLocation = [\n            countryCoordinates.latlng[0],\n            countryCoordinates.latlng[1],\n          ];\n\n          // Si le plat est italien, ajoutez une petite variation aléatoire aux coordonnées\n          if (countryName === 'Italy') {\n            const latVariation = (Math.random() - 0.5) * 0.05; // Variation aléatoire entre -0.025 et 0.025\nconst lonVariation = (Math.random() - 0.5) * 0.05; // Variation aléatoire entre -0.025 et 0.025\nmealLocation = [\n  parseFloat(countryCoordinates.latlng[0]) + latVariation,\n  parseFloat(countryCoordinates.latlng[1]) + lonVariation,\n];\n\n          }\n\n          const markeråIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40],\n          });\n\n          L.marker(mealLocation, { icon: markerIcon })\n            .addTo(this.map)\n            .bindPopup(\n              `<div class=\"meal-details\">\n              <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\n              <div>\n                <p class =\"meal-name\">${mealName}</p>\n                <p>\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.</p>\n              </div>\n            </div>`\n            );\n        }\n      }\n    },\n    async fetchMealCountry(mealName) {\n      try {\n        const response = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/search.php?s=${mealName}`\n        );\n        const data = await response.json();\n\n        if (data && data.meals && data.meals.length > 0) {\n          return data.meals[0].strArea;\n        } else {\n          throw new Error(\"Meal country not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching meal country:\", error);\n        return \"\";\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1`\n        );\n        const data = await response.json();\n\n        if (data && data.length > 0) {\n          const { lat, lon } = data[0];\n          return { latlng: [lat, lon] };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return { latlng: [0, 0] };\n      }\n    },\n    convertToCountry(origin) {\n  const countryMap = {\n    Italian: \"Italy\",\n    American: \"United States\",\n    Polish: \"Poland\",\n    British: \"United Kingdom\",\n    Canadian: \"Canada\",\n    Chinese: \"China\",\n    Dutch: \"Netherlands\",\n    Egyptian: \"Egypt\",\n    French: \"France\",\n    Greek: \"Greece\",\n    Indian: \"India\",\n    Irish: \"Ireland\",\n    Jamaican: \"Jamaica\",\n    Japanese: \"Japan\",\n    Kenyan: \"Kenya\",\n    Malaysian: \"Malaysia\",\n    Mexican: \"Mexico\",\n    Moroccan: \"Morocco\",\n    Russian: \"Russia\",\n    Spanish: \"Spain\",\n    Thai: \"Thailand\",\n    Turkish: \"Turkey\",\n    Vietnamese: \"Vietnam\",\n    Argentine: \"Argentina\",\n    Australian: \"Australia\",\n    Austrian: \"Austria\",\n    Belgian: \"Belgium\",\n    Brazilian: \"Brazil\",\n    Caribbean: \"Caribbean\",\n    Colombian: \"Colombia\",\n    Cuban: \"Cuba\",\n    Danish: \"Denmark\",\n    Finnish: \"Finland\",\n    German: \"Germany\",\n    Hungarian: \"Hungary\",\n    Indonesian: \"Indonesia\",\n    Israeli: \"Israel\",\n    Lithuanian: \"Lithuania\",\n    Maltese: \"Malta\",\n    Norwegian: \"Norway\",\n    Portuguese: \"Portugal\",\n    SaudiArabian: \"Saudi Arabia\",\n    Singaporean: \"Singapore\",\n    Slovenian: \"Slovenia\",\n    SouthAfrican: \"South Africa\",\n    Swedish: \"Sweden\",\n    Swiss: \"Switzerland\",\n    Ukrainian: \"Ukraine\",\n    Uzbekistani: \"Uzbekistan\",\n    // Ajoutez d'autres origines et leurs pays correspondants ici\n  };\n  \n      return countryMap[origin] || origin;\n    },\n  },\n};\n</script>\n"],"mappings":";OAESA,UAAwB;gCAD/BC,mBAAA,CAES,iB,aADPA,mBAAA,CAAkD;EAA7CC,GAAwB,EAAxBF,UAAwB;EAACG,GAAG,EAAC,EAAE;EAACC,KAAK,EAAC;;gCAE7CH,mBAAA,CAAoB;EAAfI,EAAE,EAAC;AAAK;;uBAJfC,mBAAA,CAAAC,SAAA,SACEC,UAES,EACTC,UAAoB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}