{"ast":null,"code":"import L from \"leaflet\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: []\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [[-90, -180], [90, 180]],\n        maxBoundsViscosity: 1.0\n      });\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n    },\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\");\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${countryName}&key=YOUR_API_KEY`);\n        const data = await response.json();\n        if (data.status === \"OK\") {\n          const location = data.results[0].geometry.location;\n          return {\n            latlng: [location.lat, location.lng]\n          };\n        } else {\n          throw new Error(data.error_message || \"Invalid response from Google Maps API\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        // Gérer l'erreur en retournant des coordonnées invalides\n        return {\n          latlng: [0, 0]\n        };\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n        try {\n          const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\n          console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n          if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n            const mealLocation = countryCoordinates.latlng;\n            // Reste du code pour afficher le marqueur...\n          } else {\n            console.warn(`Invalid coordinates for ${mealName}. Skipping...`);\n          }\n        } catch (error) {\n          console.error(`Error displaying ${mealName}:`, error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","name","data","meals","mounted","initMap","fetchPastaMeals","methods","map","center","zoom","minZoom","maxBounds","maxBoundsViscosity","tileLayer","attribution","maxZoom","accessToken","addTo","response","fetch","mealsData","json","displayMeals","error","console","fetchCountryCoordinates","countryName","status","location","results","geometry","latlng","lat","lng","Error","error_message","meal","mealName","strMeal","mealImage","strMealThumb","mealCountry","strArea","countryCoordinates","log","mealLocation","warn"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\n        );\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${countryName}&key=YOUR_API_KEY`);\n    const data = await response.json();\n\n    if (data.status === \"OK\") {\n      const location = data.results[0].geometry.location;\n      return { latlng: [location.lat, location.lng] };\n    } else {\n      throw new Error(data.error_message || \"Invalid response from Google Maps API\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching country coordinates:\", error);\n    // Gérer l'erreur en retournant des coordonnées invalides\n    return { latlng: [0, 0] };\n  }\n},\n\nasync displayMeals() {\n  for (const meal of this.meals) {\n    const mealName = meal.strMeal;\n    const mealImage = meal.strMealThumb;\n    const mealCountry = meal.strArea;\n\n    try {\n      const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\n      console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n      if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n        const mealLocation = countryCoordinates.latlng;\n        // Reste du code pour afficher le marqueur...\n      } else {\n        console.warn(`Invalid coordinates for ${mealName}. Skipping...`);\n      }\n    } catch (error) {\n      console.error(`Error displaying ${mealName}:`, error);\n    }\n  }\n},\n\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}