{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode } from \"vue\";\nimport _imports_0 from '../public/logo.png';\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  class: \"logo\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", null, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"header\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, category => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: category,\n      onClick: $event => $options.fetchMealsByCategory(category)\n    }, _toDisplayString(category), 9 /* TEXT, PROPS */, _hoisted_1);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_2]), _hoisted_3, _hoisted_4]);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","src","alt","class","id","_createElementBlock","_Fragment","_renderList","$data","categories","category","key","onClick","$event","$options","fetchMealsByCategory","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <header>\n      <button v-for=\"category in categories\" :key=\"category\" @click=\"fetchMealsByCategory(category)\">\n        {{ category }}\n      </button>\n      <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n    </header>\n    <div id=\"map\"></div>\n    <div>\n\n    </div>\n  </div>\n</template>\n\n<style>\n</style>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      mealsByCountry: {},\n      categories: [\n        \"Beef\",\n        \"Chicken\",\n        \"Dessert\",\n        \"Lamb\",\n        \"Miscellaneous\",\n        \"Pasta\",\n        \"Pork\",\n        \"Seafood\",\n        \"Side\",\n        \"Starter\",\n        \"Vegan\",\n        \"Vegetarian\",\n        \"Breakfast\",\n        \"Goat\",\n      ],\n    };\n  },\n  mounted() {\n    this.initMap();\n  },\n  methods: {\n    async fetchMealsByCategory(category) {\n      try {\n        const response = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`\n        );\n        const { meals } = await response.json();\n        await Promise.all(meals.map(meal => this.displayMeal(meal)));\n      } catch (error) {\n        console.error(`Error fetching meals for category ${category}:`, error);\n      }\n    },\n\n    async displayMeal(meal) {\n  const { strMeal, strMealThumb } = meal;\n  const mealCountry = await this.fetchMealCountry(strMeal);\n  const countryName = this.convertToCountry(mealCountry);\n  console.log(`Country for ${strMeal}:`, countryName);\n  if (!this.mealsByCountry[countryName]) {\n    this.mealsByCountry[countryName] = meal;\n    const countryCoordinates = await this.fetchCountryCoordinates(countryName);\n    console.log(`Coordinates for ${strMeal}:`, countryCoordinates);\n    if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n      const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\n      const markerIcon = L.icon({\n        iconUrl: strMealThumb,\n        iconSize: [40, 40],\n        iconAnchor: [20, 40],\n        popupAnchor: [0, -40],\n      });\n      const marker = L.marker(mealLocation, { icon: markerIcon }).addTo(this.map);\n      \n      // Ajouter une classe CSS conditionnelle pour les plats de la cat√©gorie \"Pork\"\n      if (meal.strCategory === \"Pork\") {\n        marker._icon.classList.add(\"pork-meal\");\n      }\n      \n      marker.bindPopup(\n        `<div class=\"meal-details\">\n          <img class=\"meal-image\" src=\"${strMealThumb}\" alt=\"${strMeal}\">\n          <div>\n            <p class =\"meal-name\">${strMeal}</p>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.</p>\n          </div>\n        </div>`\n      );\n    }\n  }\n},\n\n\n    async fetchMealCountry(mealName) {\n      try {\n        const response = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/search.php?s=${mealName}`\n        );\n        const { meals } = await response.json();\n        if (meals && meals.length > 0) {\n          return meals[0].strArea;\n        } else {\n          throw new Error(\"Meal country not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching meal country:\", error);\n        return \"\";\n      }\n    },\n\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1`\n        );\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const { lat, lon } = data[0];\n          return { latlng: [lat, lon] };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return { latlng: [0, 0] };\n      }\n    },\n\n    convertToCountry(origin) {\n      const countryMap = {\n        Italian: \"Italy\",\n        American: \"United States\",\n        Polish: \"Poland\",\n        British: \"United Kingdom\",\n        Canadian: \"Canada\",\n        Chinese: \"China\",\n        Dutch: \"Netherlands\",\n        Egyptian: \"Egypt\",\n        French: \"France\",\n        Greek: \"Greece\",\n        Indian: \"India\",\n        Irish: \"Ireland\",\n        Jamaican: \"Jamaica\",\n        Japanese: \"Japan\",\n        Kenyan: \"Kenya\",\n        Malaysian: \"Malaysia\",\n        Mexican: \"Mexico\",\n        Moroccan: \"Morocco\",\n        Russian: \"Russia\",\n        Spanish: \"Spain\",\n        Thai: \"Thailand\",\n        Turkish: \"Turkey\",\n        Vietnamese: \"Vietnam\",\n        Argentine: \"Argentina\",\n        Australian: \"Australia\",\n        Austrian: \"Austria\",\n        Belgian: \"Belgium\",\n        Brazilian: \"Brazil\",\n        Caribbean: \"Caribbean\",\n        Colombian: \"Colombia\",\n        Cuban: \"Cuba\",\n        Danish: \"Denmark\",\n        Finnish: \"Finland\",\n        German: \"Germany\",\n        Hungarian: \"Hungary\",\n        Indonesian: \"Indonesia\",\n        Israeli: \"Israel\",\n        Lithuanian: \"Lithuania\",\n        Maltese: \"Malta\",\n        Norwegian: \"Norway\",\n        Portuguese: \"Portugal\",\n        SaudiArabian: \"Saudi Arabia\",\n        Singaporean: \"Singapore\",\n        Slovenian: \"Slovenia\",\n        SouthAfrican: \"South Africa\",\n        Swedish: \"Sweden\",\n        Swiss: \"Switzerland\",\n        Ukrainian: \"Ukraine\",\n        Uzbekistani: \"Uzbekistan\",\n        // Ajoutez d'autres origines et leurs pays correspondants ici\n      };\n      return countryMap[origin] || origin;\n    },\n    \n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n  },\n};\n</script>\n"],"mappings":";OAMWA,UAAwB;mBANnC;gCAMMC,mBAAA,CAAkD;EAA7CC,GAAwB,EAAxBF,UAAwB;EAACG,GAAG,EAAC,EAAE;EAACC,KAAK,EAAC;;gCAE7CH,mBAAA,CAAoB;EAAfI,EAAE,EAAC;AAAK;gCACbJ,mBAAA,CAEM;;uBAVRK,mBAAA,CAWM,cAVJL,mBAAA,CAKS,kB,kBAJPK,mBAAA,CAESC,SAAA,QALfC,WAAA,CAGiCC,KAAA,CAAAC,UAAU,EAAtBC,QAAQ;yBAAvBL,mBAAA,CAES;MAF+BM,GAAG,EAAED,QAAQ;MAAGE,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,oBAAoB,CAACL,QAAQ;wBACvFA,QAAQ,wBAJnBM,UAAA;kCAMMC,UAAkD,C,GAEpDC,UAAoB,EACpBC,UAEM,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}