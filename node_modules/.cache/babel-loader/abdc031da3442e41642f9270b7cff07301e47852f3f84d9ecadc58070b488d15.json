{"ast":null,"code":"import L from \"leaflet\";\nexport default {\n  name: 'App',\n  data() {\n    return {\n      meals: []\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map('map').setView([0, 0], 2);\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey'\n      }).addTo(this.map);\n    },\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch('https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta');\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error('Error fetching pasta meals:', error);\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n        const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\n        const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\n        const markerIcon = L.icon({\n          iconUrl: mealImage,\n          iconSize: [40, 40],\n          iconAnchor: [20, 40],\n          popupAnchor: [0, -40]\n        });\n        L.marker(mealLocation, {\n          icon: markerIcon\n        }).addTo(this.map).bindPopup(`<b>${mealName}</b><br><img src=\"${mealImage}\" alt=\"${mealName}\" style=\"max-width: 100px;\">`);\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          return {\n            latlng: [lat, lon]\n          };\n        } else {\n          throw new Error('Country coordinates not found or invalid response');\n        }\n      } catch (error) {\n        console.error('Error fetching country coordinates:', error);\n        return {\n          latlng: [0, 0]\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","name","data","meals","mounted","initMap","fetchPastaMeals","methods","map","setView","tileLayer","attribution","maxZoom","accessToken","addTo","response","fetch","mealsData","json","displayMeals","error","console","meal","mealName","strMeal","mealImage","strMealThumb","mealCountry","strArea","countryCoordinates","fetchCountryCoordinates","mealLocation","latlng","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","bindPopup","countryName","length","lat","lon","Error"],"sources":["C:\\Users\\robba\\VueProjects\\Gourmet_Atlas-Project-main\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\n\r\nexport default {\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      meals: [] \r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchPastaMeals();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([0, 0], 2);\r\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey'\r\n      }).addTo(this.map);\r\n    },\r\n    async fetchPastaMeals() {\r\n      try {\r\n        const response = await fetch('https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta');\r\n        const mealsData = await response.json();\r\n        this.meals = mealsData.meals;\r\n        this.displayMeals();\r\n      } catch (error) {\r\n        console.error('Error fetching pasta meals:', error);\r\n      }\r\n    },\r\n    async displayMeals() {\r\n      for (const meal of this.meals) {\r\n        const mealName = meal.strMeal;\r\n        const mealImage = meal.strMealThumb;\r\n        const mealCountry = meal.strArea; \r\n        \r\n        const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\r\n        const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\r\n        const markerIcon = L.icon({\r\n          iconUrl: mealImage,\r\n          iconSize: [40, 40],\r\n          iconAnchor: [20, 40],\r\n          popupAnchor: [0, -40]\r\n        });\r\n        L.marker(mealLocation, { icon: markerIcon })\r\n          .addTo(this.map)\r\n          .bindPopup(`<b>${mealName}</b><br><img src=\"${mealImage}\" alt=\"${mealName}\" style=\"max-width: 100px;\">`);\r\n      }\r\n    },\r\n    async fetchCountryCoordinates(countryName) {\r\n  try {\r\n    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`);\r\n    const data = await response.json();\r\n    if (data && data.length > 0) {\r\n      const { lat, lon } = data[0];\r\n      return { latlng: [lat, lon] };\r\n    } else {\r\n      throw new Error('Country coordinates not found or invalid response');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching country coordinates:', error);\r\n    return { latlng: [0, 0] };\r\n  }\r\n}\r\n  }\r\n};\r\n</script>"],"mappings":"AAKA,OAAOA,CAAA,MAAO,SAAS;AAEvB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACd,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACPF,OAAOA,CAAA,EAAG;MACR,IAAI,CAACG,GAAE,GAAIR,CAAC,CAACQ,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1CT,CAAC,CAACU,SAAS,CAAC,4EAA4E,EAAE;QACxFC,WAAW,EAAE,mJAAmJ;QAChKC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MACf,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACN,GAAG,CAAC;IACpB,CAAC;IACD,MAAMF,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMS,QAAO,GAAI,MAAMC,KAAK,CAAC,4DAA4D,CAAC;QAC1F,MAAMC,SAAQ,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACvC,IAAI,CAACf,KAAI,GAAIc,SAAS,CAACd,KAAK;QAC5B,IAAI,CAACgB,YAAY,CAAC,CAAC;MACrB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACD,MAAMD,YAAYA,CAAA,EAAG;MACnB,KAAK,MAAMG,IAAG,IAAK,IAAI,CAACnB,KAAK,EAAE;QAC7B,MAAMoB,QAAO,GAAID,IAAI,CAACE,OAAO;QAC7B,MAAMC,SAAQ,GAAIH,IAAI,CAACI,YAAY;QACnC,MAAMC,WAAU,GAAIL,IAAI,CAACM,OAAO;QAEhC,MAAMC,kBAAiB,GAAI,MAAM,IAAI,CAACC,uBAAuB,CAACH,WAAW,CAAC;QAC1E,MAAMI,YAAW,GAAI,CAACF,kBAAkB,CAACG,MAAM,CAAC,CAAC,CAAC,EAAEH,kBAAkB,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;QACjF,MAAMC,UAAS,GAAIjC,CAAC,CAACkC,IAAI,CAAC;UACxBC,OAAO,EAAEV,SAAS;UAClBW,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;UAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;UACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;QACtB,CAAC,CAAC;QACFtC,CAAC,CAACuC,MAAM,CAACR,YAAY,EAAE;UAAEG,IAAI,EAAED;QAAW,CAAC,EACxCnB,KAAK,CAAC,IAAI,CAACN,GAAG,EACdgC,SAAS,CAAE,MAAKjB,QAAS,qBAAoBE,SAAU,UAASF,QAAS,8BAA6B,CAAC;MAC5G;IACF,CAAC;IACD,MAAMO,uBAAuBA,CAACW,WAAW,EAAE;MAC7C,IAAI;QACF,MAAM1B,QAAO,GAAI,MAAMC,KAAK,CAAE,4DAA2DyB,WAAY,yBAAwBA,WAAY,EAAC,CAAC;QAC3I,MAAMvC,IAAG,GAAI,MAAMa,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAIhB,IAAG,IAAKA,IAAI,CAACwC,MAAK,GAAI,CAAC,EAAE;UAC3B,MAAM;YAAEC,GAAG;YAAEC;UAAI,IAAI1C,IAAI,CAAC,CAAC,CAAC;UAC5B,OAAO;YAAE8B,MAAM,EAAE,CAACW,GAAG,EAAEC,GAAG;UAAE,CAAC;QAC/B,OAAO;UACL,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;QACtE;MACF,EAAE,OAAOzB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3D,OAAO;UAAEY,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;QAAE,CAAC;MAC3B;IACF;EACE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}