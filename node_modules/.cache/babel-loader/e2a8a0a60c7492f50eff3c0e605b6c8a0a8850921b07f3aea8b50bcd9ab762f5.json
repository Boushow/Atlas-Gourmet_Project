{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../public/logo.png';\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"header\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  class: \"logo\"\n})], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\"\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","src","alt","class","id","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2"],"sources":["C:\\Users\\oussa\\OneDrive\\Bureau\\programmation\\developpement\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <header>\r\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\r\n  </header>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from \"leaflet\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  data() {\r\n    return {\r\n      meals: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchPastaMeals();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map(\"map\", {\r\n        center: [0, 0],\r\n        zoom: 1,\r\n        minZoom: 2, // Spécifie le niveau de zoom minimum autorisé\r\n        maxBounds: [\r\n          [-90, -180],\r\n          [90, 180],\r\n        ],\r\n        maxBoundsViscosity: 1.0,\r\n      });\r\n\r\n      L.tileLayer(\r\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\r\n        {\r\n          attribution:\r\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n          maxZoom: 18,\r\n          accessToken:\r\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\r\n        }\r\n      ).addTo(this.map);\r\n    },\r\n\r\n    async fetchPastaMeals() {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\r\n        );\r\n        const mealsData = await response.json();\r\n        this.meals = mealsData.meals;\r\n        this.displayMeals();\r\n      } catch (error) {\r\n        console.error(\"Error fetching pasta meals:\", error);\r\n      }\r\n    },\r\n    async displayMeals() {\r\n      for (const meal of this.meals) {\r\n        const mealName = meal.strMeal;\r\n        const mealImage = meal.strMealThumb;\r\n        const mealCountry = meal.strArea;\r\n\r\n        const countryCoordinates = await this.fetchCountryCoordinates(\r\n          mealCountry\r\n        );\r\n\r\n        // Afficher les coordonnées récupérées dans la console\r\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\r\n\r\n        // Vérifier si les coordonnées sont valides avant d'ajouter le marqueur\r\n        if (\r\n          countryCoordinates.latlng[0] !== 0 ||\r\n          countryCoordinates.latlng[1] !== 0\r\n        ) {\r\n          const mealLocation = [\r\n            countryCoordinates.latlng[0],\r\n            countryCoordinates.latlng[1],\r\n          ];\r\n\r\n          const markerIcon = L.icon({\r\n            iconUrl: mealImage,\r\n            iconSize: [40, 40],\r\n            iconAnchor: [20, 40],\r\n            popupAnchor: [0, -40],\r\n          });\r\n\r\n          L.marker(mealLocation, { icon: markerIcon })\r\n            .addTo(this.map)\r\n            .bindPopup(\r\n              `<div class=\"meal-details\">\r\n              <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\r\n              <div>\r\n                <p class =\"meal-name\">${mealName}</p>\r\n                <p>\r\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.</p>\r\n              </div>\r\n              \r\n            </div>\r\n              `\r\n            );\r\n        }\r\n      }\r\n    },\r\n    async fetchCountryCoordinates(countryName) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        if (data && data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          return { latlng: [lat, lon] };\r\n        } else {\r\n          throw new Error(\"Country coordinates not found or invalid response\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching country coordinates:\", error);\r\n        return { latlng: [0, 0] };\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";OAESA,UAAwB;gCAD/BC,mBAAA,CAES,iB,aADPA,mBAAA,CAAkD;EAA7CC,GAAwB,EAAxBF,UAAwB;EAACG,GAAG,EAAC,EAAE;EAACC,KAAK,EAAC;;gCAE7CH,mBAAA,CAAoB;EAAfI,EAAE,EAAC;AAAK;;uBAJfC,mBAAA,CAAAC,SAAA,SACEC,UAES,EACTC,UAAoB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}