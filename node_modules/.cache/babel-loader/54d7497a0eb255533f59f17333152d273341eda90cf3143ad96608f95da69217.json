{"ast":null,"code":"import L from \"leaflet\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: []\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [[-90, -180], [90, 180]],\n        maxBoundsViscosity: 1.0\n      });\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n    },\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\");\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async fetchMealCountry(mealName) {\n      try {\n        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${mealName}`);\n        const data = await response.json();\n        if (data && data.meals && data.meals.length > 0) {\n          return data.meals[0].strArea;\n        } else {\n          throw new Error(\"Meal country not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching meal country:\", error);\n        return \"\";\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          return {\n            latlng: [lat, lon]\n          };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return {\n          latlng: [0, 0]\n        };\n      }\n    },\n    convertToCountry(origin) {\n      const countryMap = {\n        Italian: \"Italy\",\n        American: \"United States\",\n        Polish: \"Poland\",\n        British: \"United Kingdom\",\n        Canadian: \"Canada\",\n        Chinese: \"China\",\n        Dutch: \"Netherlands\",\n        Egyptian: \"Egypt\",\n        French: \"France\",\n        Greek: \"Greece\",\n        Indian: \"India\",\n        Irish: \"Ireland\",\n        Jamaican: \"Jamaica\",\n        Japanese: \"Japan\",\n        Kenyan: \"Kenya\",\n        Malaysian: \"Malaysia\",\n        Mexican: \"Mexico\",\n        Moroccan: \"Morocco\",\n        Russian: \"Russia\",\n        Spanish: \"Spain\",\n        Thai: \"Thailand\",\n        Turkish: \"Turkey\",\n        Vietnamese: \"Vietnam\",\n        Argentine: \"Argentina\",\n        Australian: \"Australia\",\n        Austrian: \"Austria\",\n        Belgian: \"Belgium\",\n        Brazilian: \"Brazil\",\n        Caribbean: \"Caribbean\",\n        Colombian: \"Colombia\",\n        Cuban: \"Cuba\",\n        Danish: \"Denmark\",\n        Finnish: \"Finland\",\n        German: \"Germany\",\n        Hungarian: \"Hungary\",\n        Indonesian: \"Indonesia\",\n        Israeli: \"Israel\",\n        Lithuanian: \"Lithuania\",\n        Maltese: \"Malta\",\n        Norwegian: \"Norway\",\n        Portuguese: \"Portugal\",\n        SaudiArabian: \"Saudi Arabia\",\n        Singaporean: \"Singapore\",\n        Slovenian: \"Slovenia\",\n        SouthAfrican: \"South Africa\",\n        Swedish: \"Sweden\",\n        Swiss: \"Switzerland\",\n        Ukrainian: \"Ukraine\",\n        Uzbekistani: \"Uzbekistan\"\n        // Ajoutez d'autres origines et leurs pays correspondants ici\n      };\n      return countryMap[origin] || origin;\n    }\n  }\n};","map":{"version":3,"names":["L","name","data","meals","mounted","initMap","fetchPastaMeals","methods","map","center","zoom","minZoom","maxBounds","maxBoundsViscosity","tileLayer","attribution","maxZoom","accessToken","addTo","response","fetch","mealsData","json","displayMeals","error","console","fetchMealCountry","mealName","length","strArea","Error","fetchCountryCoordinates","countryName","lat","lon","latlng","convertToCountry","origin","countryMap","Italian","American","Polish","British","Canadian","Chinese","Dutch","Egyptian","French","Greek","Indian","Irish","Jamaican","Japanese","Kenyan","Malaysian","Mexican","Moroccan","Russian","Spanish","Thai","Turkish","Vietnamese","Argentine","Australian","Austrian","Belgian","Brazilian","Caribbean","Colombian","Cuban","Danish","Finnish","German","Hungarian","Indonesian","Israeli","Lithuanian","Maltese","Norwegian","Portuguese","SaudiArabian","Singaporean","Slovenian","SouthAfrican","Swedish","Swiss","Ukrainian","Uzbekistani"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\n        );\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n\n    async fetchMealCountry(mealName) {\n      try {\n        const response = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/search.php?s=${mealName}`\n        );\n        const data = await response.json();\n\n        if (data && data.meals && data.meals.length > 0) {\n          return data.meals[0].strArea;\n        } else {\n          throw new Error(\"Meal country not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching meal country:\", error);\n        return \"\";\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1`\n        );\n        const data = await response.json();\n\n        if (data && data.length > 0) {\n          const { lat, lon } = data[0];\n          return { latlng: [lat, lon] };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return { latlng: [0, 0] };\n      }\n    },\n    convertToCountry(origin) {\n  const countryMap = {\n    Italian: \"Italy\",\n    American: \"United States\",\n    Polish: \"Poland\",\n    British: \"United Kingdom\",\n    Canadian: \"Canada\",\n    Chinese: \"China\",\n    Dutch: \"Netherlands\",\n    Egyptian: \"Egypt\",\n    French: \"France\",\n    Greek: \"Greece\",\n    Indian: \"India\",\n    Irish: \"Ireland\",\n    Jamaican: \"Jamaica\",\n    Japanese: \"Japan\",\n    Kenyan: \"Kenya\",\n    Malaysian: \"Malaysia\",\n    Mexican: \"Mexico\",\n    Moroccan: \"Morocco\",\n    Russian: \"Russia\",\n    Spanish: \"Spain\",\n    Thai: \"Thailand\",\n    Turkish: \"Turkey\",\n    Vietnamese: \"Vietnam\",\n    Argentine: \"Argentina\",\n    Australian: \"Australia\",\n    Austrian: \"Austria\",\n    Belgian: \"Belgium\",\n    Brazilian: \"Brazil\",\n    Caribbean: \"Caribbean\",\n    Colombian: \"Colombia\",\n    Cuban: \"Cuba\",\n    Danish: \"Denmark\",\n    Finnish: \"Finland\",\n    German: \"Germany\",\n    Hungarian: \"Hungary\",\n    Indonesian: \"Indonesia\",\n    Israeli: \"Israel\",\n    Lithuanian: \"Lithuania\",\n    Maltese: \"Malta\",\n    Norwegian: \"Norway\",\n    Portuguese: \"Portugal\",\n    SaudiArabian: \"Saudi Arabia\",\n    Singaporean: \"Singapore\",\n    Slovenian: \"Slovenia\",\n    SouthAfrican: \"South Africa\",\n    Swedish: \"Sweden\",\n    Swiss: \"Switzerland\",\n    Ukrainian: \"Ukraine\",\n    Uzbekistani: \"Uzbekistan\",\n    // Ajoutez d'autres origines et leurs pays correspondants ici\n  };\n  \n      return countryMap[origin] || origin;\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}