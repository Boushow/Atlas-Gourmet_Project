{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../public/logo.png';\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"header\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  class: \"logo\"\n})], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\"\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","src","alt","class","id","_createElementBlock","_Fragment","_hoisted_1","_hoisted_2"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\n        );\n        const mealsData = await response.json();\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n\n        const countryCoordinates = await this.fetchCountryCoordinates(\n          mealCountry\n        );\n\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        if (\n          countryCoordinates.latlng[0] !== 0 ||\n          countryCoordinates.latlng[1] !== 0\n        ) {\n          const mealLocation = [\n            parseFloat(countryCoordinates.latlng[0]),\n            parseFloat(countryCoordinates.latlng[1]),\n          ];\n\n          const markerIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40],\n          });\n\n          L.marker(mealLocation, { icon: markerIcon })\n            .addTo(this.map)\n            .bindPopup(\n              `<div class=\"meal-details\">\n                <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\n                <div>\n                  <p class=\"meal-name\">${mealName}</p>\n                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                </div>\n              </div>`\n            );\n        }\n      }\n    },\nasync fetchCountryCoordinates(countryName) {\n  try {\n    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${countryName}&key=YOUR_API_KEY`);\n    const data = await response.json();\n\n    if (data.status === \"OK\") {\n      const location = data.results[0].geometry.location;\n      return { latlng: [location.lat, location.lng] };\n    } else {\n      throw new Error(data.error_message || \"Invalid response from Google Maps API\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching country coordinates:\", error);\n    return { latlng: [0, 0] };\n  }\n},\n\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n</style>\n"],"mappings":";OAESA,UAAwB;gCAD/BC,mBAAA,CAES,iB,aADPA,mBAAA,CAAkD;EAA7CC,GAAwB,EAAxBF,UAAwB;EAACG,GAAG,EAAC,EAAE;EAACC,KAAK,EAAC;;gCAE7CH,mBAAA,CAAoB;EAAfI,EAAE,EAAC;AAAK;;uBAJfC,mBAAA,CAAAC,SAAA,SACEC,UAES,EACTC,UAAoB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}