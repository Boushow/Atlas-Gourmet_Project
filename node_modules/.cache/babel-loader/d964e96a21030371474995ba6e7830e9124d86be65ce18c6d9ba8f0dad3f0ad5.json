{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nasync function fetchPlates() {\n  const plates = [];\n\n  // Fetching plates data\n  let nextPage = 'https://worldfoodguide/api/photos/';\n  while (plates.length < 1000 && nextPage) {\n    const response = await fetch(nextPage);\n    const data = await response.json();\n    nextPage = data.next;\n    data.results.forEach(result => {\n      const plateName = result.dish_name;\n      const plateImage = result.location;\n      plates.push({\n        name: plateName,\n        image: plateImage\n      });\n    });\n  }\n\n  // Fetching details for each plate\n  for (const plate of plates) {\n    const response = await fetchPlateDetails(plate.name);\n    plate.location = response.location; // Assuming the location is fetched from the details API\n  }\n  return plates;\n}\nasync function fetchPlateDetails(plateName) {\n  const response = await fetch(`https://worldfoodguide/api/plate-details/?name=${encodeURIComponent(plateName)}`);\n  return await response.json();\n}\nasync function main() {\n  const plates = await fetchPlates();\n  console.log(plates); // This will log the array of plates with their names, images, and locations\n}\nmain();\nimport L from 'leaflet';\nexport default {\n  name: 'App',\n  mounted() {\n    this.initMap();\n    this.fetchDishes();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map('map').setView([0, 0], 2); // Position initiale de la carte\n\n      // Ajout du fond de carte Jawg.light\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\n      }).addTo(this.map);\n    },\n    async fetchDishes() {\n      try {\n        // Faites une requête à l'API pour récupérer les données des plats\n        const response = await fetch('https://worldfoodguide/api/photos/');\n        const dishes = await response.json(); // Convertir la réponse en JSON\n\n        // Placez les marqueurs sur la carte pour chaque plat\n        dishes.forEach(dish => {\n          if (dish.location) {\n            const name = dish.name;\n            const image = dish.image;\n            const location = [dish.location.latitude, dish.location.longitude];\n            const markerIcon = L.icon({\n              iconUrl: image,\n              iconSize: [40, 40],\n              iconAnchor: [20, 40],\n              popupAnchor: [0, -40]\n            });\n            L.marker(location, {\n              icon: markerIcon\n            }).addTo(this.map).bindPopup(`<b>${name}</b><br><img src=\"${image}\" alt=\"${name}\" style=\"max-width: 100px;\">`);\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching dishes:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchPlates","plates","nextPage","length","response","fetch","data","json","next","results","forEach","result","plateName","dish_name","plateImage","location","push","name","image","plate","fetchPlateDetails","encodeURIComponent","main","console","log","L","mounted","initMap","fetchDishes","methods","map","setView","tileLayer","attribution","maxZoom","accessToken","addTo","dishes","dish","latitude","longitude","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","bindPopup","error"],"sources":["C:\\Users\\Mohamed\\Desktop\\code\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nasync function fetchPlates() {\r\n    const plates = [];\r\n    \r\n    // Fetching plates data\r\n    let nextPage = 'https://worldfoodguide/api/photos/';\r\n    while (plates.length < 1000 && nextPage) {\r\n        const response = await fetch(nextPage);\r\n        const data = await response.json();\r\n        nextPage = data.next;\r\n        \r\n        data.results.forEach(result => {\r\n            const plateName = result.dish_name;\r\n            const plateImage = result.location;\r\n            plates.push({ name: plateName, image: plateImage });\r\n        });\r\n    }\r\n    \r\n    // Fetching details for each plate\r\n    for (const plate of plates) {\r\n        const response = await fetchPlateDetails(plate.name);\r\n        plate.location = response.location; // Assuming the location is fetched from the details API\r\n    }\r\n    \r\n    return plates;\r\n}\r\n\r\nasync function fetchPlateDetails(plateName) {\r\n    const response = await fetch(`https://worldfoodguide/api/plate-details/?name=${encodeURIComponent(plateName)}`);\r\n    return await response.json();\r\n}\r\n\r\nasync function main() {\r\n    const plates = await fetchPlates();\r\n    console.log(plates); // This will log the array of plates with their names, images, and locations\r\n}\r\n\r\nmain();\r\n\r\nimport L from 'leaflet';\r\n\r\nexport default {\r\n  name: 'App',\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchDishes();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([0, 0], 2); // Position initiale de la carte\r\n\r\n      // Ajout du fond de carte Jawg.light\r\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\r\n      }).addTo(this.map);\r\n    },\r\n    async fetchDishes() {\r\n      try {\r\n        // Faites une requête à l'API pour récupérer les données des plats\r\n        const response = await fetch('https://worldfoodguide/api/photos/');\r\n        const dishes = await response.json(); // Convertir la réponse en JSON\r\n\r\n        // Placez les marqueurs sur la carte pour chaque plat\r\n        dishes.forEach(dish => {\r\n          if (dish.location) {\r\n            const name = dish.name;\r\n            const image = dish.image;\r\n            const location = [dish.location.latitude, dish.location.longitude];\r\n\r\n            const markerIcon = L.icon({\r\n              iconUrl: image,\r\n              iconSize: [40, 40],\r\n              iconAnchor: [20, 40],\r\n              popupAnchor: [0, -40]\r\n            });\r\n\r\n            L.marker(location, { icon: markerIcon })\r\n              .addTo(this.map)\r\n              .bindPopup(`<b>${name}</b><br><img src=\"${image}\" alt=\"${name}\" style=\"max-width: 100px;\">`);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching dishes:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n</style>\r\n"],"mappings":";AAKA,eAAeA,WAAWA,CAAA,EAAG;EACzB,MAAMC,MAAK,GAAI,EAAE;;EAEjB;EACA,IAAIC,QAAO,GAAI,oCAAoC;EACnD,OAAOD,MAAM,CAACE,MAAK,GAAI,IAAG,IAAKD,QAAQ,EAAE;IACrC,MAAME,QAAO,GAAI,MAAMC,KAAK,CAACH,QAAQ,CAAC;IACtC,MAAMI,IAAG,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCL,QAAO,GAAII,IAAI,CAACE,IAAI;IAEpBF,IAAI,CAACG,OAAO,CAACC,OAAO,CAACC,MAAK,IAAK;MAC3B,MAAMC,SAAQ,GAAID,MAAM,CAACE,SAAS;MAClC,MAAMC,UAAS,GAAIH,MAAM,CAACI,QAAQ;MAClCd,MAAM,CAACe,IAAI,CAAC;QAAEC,IAAI,EAAEL,SAAS;QAAEM,KAAK,EAAEJ;MAAW,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;;EAEA;EACA,KAAK,MAAMK,KAAI,IAAKlB,MAAM,EAAE;IACxB,MAAMG,QAAO,GAAI,MAAMgB,iBAAiB,CAACD,KAAK,CAACF,IAAI,CAAC;IACpDE,KAAK,CAACJ,QAAO,GAAIX,QAAQ,CAACW,QAAQ,EAAE;EACxC;EAEA,OAAOd,MAAM;AACjB;AAEA,eAAemB,iBAAiBA,CAACR,SAAS,EAAE;EACxC,MAAMR,QAAO,GAAI,MAAMC,KAAK,CAAE,kDAAiDgB,kBAAkB,CAACT,SAAS,CAAE,EAAC,CAAC;EAC/G,OAAO,MAAMR,QAAQ,CAACG,IAAI,CAAC,CAAC;AAChC;AAEA,eAAee,IAAIA,CAAA,EAAG;EAClB,MAAMrB,MAAK,GAAI,MAAMD,WAAW,CAAC,CAAC;EAClCuB,OAAO,CAACC,GAAG,CAACvB,MAAM,CAAC,EAAE;AACzB;AAEAqB,IAAI,CAAC,CAAC;AAEN,OAAOG,CAAA,MAAO,SAAS;AAEvB,eAAe;EACbR,IAAI,EAAE,KAAK;EACXS,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACd,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPF,OAAOA,CAAA,EAAG;MACR,IAAI,CAACG,GAAE,GAAIL,CAAC,CAACK,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;;MAE5C;MACAN,CAAC,CAACO,SAAS,CAAC,4EAA4E,EAAE;QACxFC,WAAW,EAAE,mJAAmJ;QAChKC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,kEAAiE,CAAE;MAClF,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACN,GAAG,CAAC;IACpB,CAAC;IACD,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF;QACA,MAAMxB,QAAO,GAAI,MAAMC,KAAK,CAAC,oCAAoC,CAAC;QAClE,MAAMgC,MAAK,GAAI,MAAMjC,QAAQ,CAACG,IAAI,CAAC,CAAC,EAAE;;QAEtC;QACA8B,MAAM,CAAC3B,OAAO,CAAC4B,IAAG,IAAK;UACrB,IAAIA,IAAI,CAACvB,QAAQ,EAAE;YACjB,MAAME,IAAG,GAAIqB,IAAI,CAACrB,IAAI;YACtB,MAAMC,KAAI,GAAIoB,IAAI,CAACpB,KAAK;YACxB,MAAMH,QAAO,GAAI,CAACuB,IAAI,CAACvB,QAAQ,CAACwB,QAAQ,EAAED,IAAI,CAACvB,QAAQ,CAACyB,SAAS,CAAC;YAElE,MAAMC,UAAS,GAAIhB,CAAC,CAACiB,IAAI,CAAC;cACxBC,OAAO,EAAEzB,KAAK;cACd0B,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;cAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;cACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;YACtB,CAAC,CAAC;YAEFrB,CAAC,CAACsB,MAAM,CAAChC,QAAQ,EAAE;cAAE2B,IAAI,EAAED;YAAW,CAAC,EACpCL,KAAK,CAAC,IAAI,CAACN,GAAG,EACdkB,SAAS,CAAE,MAAK/B,IAAK,qBAAoBC,KAAM,UAASD,IAAK,8BAA6B,CAAC;UAChG;QACF,CAAC,CAAC;MACJ,EAAE,OAAOgC,KAAK,EAAE;QACd1B,OAAO,CAAC0B,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}