{"ast":null,"code":"import L from \"leaflet\";\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css'; // Ajout de l'importation des styles CSS de Leaflet\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: []\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [[-90, -180], [90, 180]],\n        maxBoundsViscosity: 1.0\n      });\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n    },\n    async fetchPastaMeals() {\n      try {\n        const response = await axios.get(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"); // Remplacement de fetch par axios.get\n        const mealsData = response.data; // Utilisation de response.data pour obtenir les données\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n          params: {\n            address: countryName,\n            key: 'AIzaSyB8pXI4Gs-zqhXmx1GWHEdEWx08Rdp6xAM'\n          }\n        });\n        const data = response.data;\n        if (data.results && data.results.length > 0) {\n          const {\n            lat,\n            lng\n          } = data.results[0].geometry.location;\n          return {\n            latlng: [lat, lng]\n          };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        // Gérer l'erreur en retournant des coordonnées invalides\n        return {\n          latlng: [0, 0]\n        };\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n        const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\n\n        // Afficher les coordonnées récupérées dans la console\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        // Vérifier si les coordonnées sont valides avant d'ajouter le marqueur\n        if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n          const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\n          const markerIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40]\n          });\n          L.marker(mealLocation, {\n            icon: markerIcon\n          }).addTo(this.map).bindPopup(`<div class=\"meal-details\">\n                <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\n                <div>\n                  <p class =\"meal-name\">${mealName}</p>\n                  <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.\n                  </p>\n                </div>\n              </div>`);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","axios","name","data","meals","mounted","initMap","fetchPastaMeals","methods","map","center","zoom","minZoom","maxBounds","maxBoundsViscosity","tileLayer","attribution","maxZoom","accessToken","addTo","response","get","mealsData","displayMeals","error","console","fetchCountryCoordinates","countryName","params","address","key","results","length","lat","lng","geometry","location","latlng","Error","meal","mealName","strMeal","mealImage","strMealThumb","mealCountry","strArea","countryCoordinates","log","mealLocation","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","bindPopup"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\nimport axios from 'axios';\nimport 'leaflet/dist/leaflet.css'; // Ajout de l'importation des styles CSS de Leaflet\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n\n    async fetchPastaMeals() {\n      try {\n        const response = await axios.get(\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\n        ); // Remplacement de fetch par axios.get\n        const mealsData = response.data; // Utilisation de response.data pour obtenir les données\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n          params: {\n            address: countryName,\n            key: 'AIzaSyB8pXI4Gs-zqhXmx1GWHEdEWx08Rdp6xAM'\n          }\n        });\n\n        const data = response.data;\n        if (data.results && data.results.length > 0) {\n          const { lat, lng } = data.results[0].geometry.location;\n          return { latlng: [lat, lng] };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        // Gérer l'erreur en retournant des coordonnées invalides\n        return { latlng: [0, 0] };\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n\n        const countryCoordinates = await this.fetchCountryCoordinates(\n          mealCountry\n        );\n\n        // Afficher les coordonnées récupérées dans la console\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        // Vérifier si les coordonnées sont valides avant d'ajouter le marqueur\n        if (\n          countryCoordinates.latlng[0] !== 0 ||\n          countryCoordinates.latlng[1] !== 0\n        ) {\n          const mealLocation = [\n            countryCoordinates.latlng[0],\n            countryCoordinates.latlng[1],\n          ];\n\n          const markerIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40],\n          });\n\n          L.marker(mealLocation, { icon: markerIcon })\n            .addTo(this.map)\n            .bindPopup(\n              `<div class=\"meal-details\">\n                <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\n                <div>\n                  <p class =\"meal-name\">${mealName}</p>\n                  <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.\n                  </p>\n                </div>\n              </div>`\n            );\n        }\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAQA,OAAOA,CAAA,MAAO,SAAS;AACvB,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAO,0BAA0B,EAAE;;AAEnC,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACd,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACPF,OAAOA,CAAA,EAAG;MACR,IAAI,CAACG,GAAE,GAAIT,CAAC,CAACS,GAAG,CAAC,KAAK,EAAE;QACtBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACdC,IAAI,EAAE,CAAC;QACPC,OAAO,EAAE,CAAC;QACVC,SAAS,EAAE,CACT,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EACX,CAAC,EAAE,EAAE,GAAG,CAAC,CACV;QACDC,kBAAkB,EAAE;MACtB,CAAC,CAAC;MAEFd,CAAC,CAACe,SAAS,CACT,4EAA4E,EAC5E;QACEC,WAAW,EACT,mJAAmJ;QACrJC,OAAO,EAAE,EAAE;QACXC,WAAW,EACT;MACJ,CACF,CAAC,CAACC,KAAK,CAAC,IAAI,CAACV,GAAG,CAAC;IACnB,CAAC;IAED,MAAMF,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMa,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAC9B,4DACF,CAAC,EAAE;QACH,MAAMC,SAAQ,GAAIF,QAAQ,CAACjB,IAAI,EAAE;QACjC,IAAI,CAACC,KAAI,GAAIkB,SAAS,CAAClB,KAAK;QAC5B,IAAI,CAACmB,YAAY,CAAC,CAAC;MACrB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACD,MAAME,uBAAuBA,CAACC,WAAW,EAAE;MACzC,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,mDAAmD,EAAE;UACpFO,MAAM,EAAE;YACNC,OAAO,EAAEF,WAAW;YACpBG,GAAG,EAAE;UACP;QACF,CAAC,CAAC;QAEF,MAAM3B,IAAG,GAAIiB,QAAQ,CAACjB,IAAI;QAC1B,IAAIA,IAAI,CAAC4B,OAAM,IAAK5B,IAAI,CAAC4B,OAAO,CAACC,MAAK,GAAI,CAAC,EAAE;UAC3C,MAAM;YAAEC,GAAG;YAAEC;UAAI,IAAI/B,IAAI,CAAC4B,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACC,QAAQ;UACtD,OAAO;YAAEC,MAAM,EAAE,CAACJ,GAAG,EAAEC,GAAG;UAAE,CAAC;QAC/B,OAAO;UACL,MAAM,IAAII,KAAK,CAAC,mDAAmD,CAAC;QACtE;MACF,EAAE,OAAOd,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3D;QACA,OAAO;UAAEa,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;QAAE,CAAC;MAC3B;IACF,CAAC;IACD,MAAMd,YAAYA,CAAA,EAAG;MACnB,KAAK,MAAMgB,IAAG,IAAK,IAAI,CAACnC,KAAK,EAAE;QAC7B,MAAMoC,QAAO,GAAID,IAAI,CAACE,OAAO;QAC7B,MAAMC,SAAQ,GAAIH,IAAI,CAACI,YAAY;QACnC,MAAMC,WAAU,GAAIL,IAAI,CAACM,OAAO;QAEhC,MAAMC,kBAAiB,GAAI,MAAM,IAAI,CAACpB,uBAAuB,CAC3DkB,WACF,CAAC;;QAED;QACAnB,OAAO,CAACsB,GAAG,CAAE,mBAAkBP,QAAS,GAAE,EAAEM,kBAAkB,CAAC;;QAE/D;QACA,IACEA,kBAAkB,CAACT,MAAM,CAAC,CAAC,MAAM,KACjCS,kBAAkB,CAACT,MAAM,CAAC,CAAC,MAAM,GACjC;UACA,MAAMW,YAAW,GAAI,CACnBF,kBAAkB,CAACT,MAAM,CAAC,CAAC,CAAC,EAC5BS,kBAAkB,CAACT,MAAM,CAAC,CAAC,CAAC,CAC7B;UAED,MAAMY,UAAS,GAAIjD,CAAC,CAACkD,IAAI,CAAC;YACxBC,OAAO,EAAET,SAAS;YAClBU,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;UACtB,CAAC,CAAC;UAEFtD,CAAC,CAACuD,MAAM,CAACP,YAAY,EAAE;YAAEE,IAAI,EAAED;UAAW,CAAC,EACxC9B,KAAK,CAAC,IAAI,CAACV,GAAG,EACd+C,SAAS,CACP;+CACgCd,SAAU,UAASF,QAAS;;0CAEjCA,QAAS;;;;;qBAMvC,CAAC;QACL;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}