{"ast":null,"code":"import L from \"leaflet\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: []\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [[-90, -180], [90, 180]],\n        maxBoundsViscosity: 1.0\n      });\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n    },\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\");\n        const mealsData = await response.json();\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n        const countryCoordinates = await this.fetchCountryCoordinates(mealCountry);\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n        if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n          const mealLocation = [parseFloat(countryCoordinates.latlng[0]), parseFloat(countryCoordinates.latlng[1])];\n          const markerIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40]\n          });\n          L.marker(mealLocation, {\n            icon: markerIcon\n          }).addTo(this.map).bindPopup(`<div class=\"meal-details\">\n                <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\n                <div>\n                  <p class=\"meal-name\">${mealName}</p>\n                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                </div>\n              </div>`);\n        }\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          return {\n            latlng: [lat, lon]\n          };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return {\n          latlng: [0, 0]\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","name","data","meals","mounted","initMap","fetchPastaMeals","methods","map","center","zoom","minZoom","maxBounds","maxBoundsViscosity","tileLayer","attribution","maxZoom","accessToken","addTo","response","fetch","mealsData","json","console","log","mealName","countryCoordinates","displayMeals","error","meal","strMeal","mealImage","strMealThumb","mealCountry","strArea","fetchCountryCoordinates","latlng","mealLocation","parseFloat","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","bindPopup","countryName","length","lat","lon","Error"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchPastaMeals();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n\n    async fetchPastaMeals() {\n      try {\n        const response = await fetch(\n          \"https://www.themealdb.com/api/json/v1/1/filter.php?c=Pasta\"\n          \n        );\n        const mealsData = await response.json();\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        this.meals = mealsData.meals;\n        this.displayMeals();\n      } catch (error) {\n        console.error(\"Error fetching pasta meals:\", error);\n      }\n    },\n    async displayMeals() {\n      for (const meal of this.meals) {\n        const mealName = meal.strMeal;\n        const mealImage = meal.strMealThumb;\n        const mealCountry = meal.strArea;\n\n        const countryCoordinates = await this.fetchCountryCoordinates(\n          mealCountry\n        );\n\n        console.log(`Coordinates for ${mealName}:`, countryCoordinates);\n\n        if (\n          countryCoordinates.latlng[0] !== 0 ||\n          countryCoordinates.latlng[1] !== 0\n        ) {\n          const mealLocation = [\n            parseFloat(countryCoordinates.latlng[0]),\n            parseFloat(countryCoordinates.latlng[1]),\n          ];\n\n          const markerIcon = L.icon({\n            iconUrl: mealImage,\n            iconSize: [40, 40],\n            iconAnchor: [20, 40],\n            popupAnchor: [0, -40],\n          });\n\n          L.marker(mealLocation, { icon: markerIcon })\n            .addTo(this.map)\n            .bindPopup(\n              `<div class=\"meal-details\">\n                <img class=\"meal-image\" src=\"${mealImage}\" alt=\"${mealName}\">\n                <div>\n                  <p class=\"meal-name\">${mealName}</p>\n                  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                </div>\n              </div>`\n            );\n        }\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1&countrycodes=${countryName}`\n        );\n        const data = await response.json();\n\n        if (data && data.length > 0) {\n          const { lat, lon } = data[0];\n          return { latlng: [lat, lon] };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return { latlng: [0, 0] };\n      }\n    },\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}