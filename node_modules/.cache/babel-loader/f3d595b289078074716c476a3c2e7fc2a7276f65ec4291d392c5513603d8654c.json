{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"map\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Mohamed\\Desktop\\code\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\n\r\nexport default {\r\n  name: 'App',\r\n  mounted() {\r\n    this.initMap();\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([48.8566, 2.3522], this.calculateZoom());\r\n\r\n      // Utilisation du fond de carte Jawg.light\r\n      L.tileLayer('https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}', {\r\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        maxZoom: 18,\r\n        accessToken: 'MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey' // Remplacez par votre propre jeton d'accès Jawg\r\n      }).addTo(this.map);\r\n\r\n      // Écouter le changement de taille de la fenêtre\r\n      window.addEventListener('resize', this.handleResize);\r\n    },\r\n    calculateZoom() {\r\n      // Calculer le niveau de zoom en fonction de la hauteur de la fenêtre\r\n      const windowHeight = window.innerHeight;\r\n      const minZoomHeight = 400; // Hauteur minimale de la carte pour autoriser le zoom\r\n      const zoomLevels = 10; // Nombre de niveaux de zoom\r\n\r\n      // Calculer le zoom nécessaire pour remplir la fenêtre\r\n      let zoom = 2; // Niveau de zoom initial\r\n      while (zoom < zoomLevels && windowHeight > minZoomHeight) {\r\n        windowHeight /= 2;\r\n        zoom++;\r\n      }\r\n\r\n      // Retourner le niveau de zoom calculé\r\n      return zoom;\r\n    },\r\n    handleResize() {\r\n      // Mettre à jour le niveau de zoom lorsque la fenêtre est redimensionnée\r\n      this.map.setZoom(this.calculateZoom());\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // Nettoyer les écouteurs d'événements lors de la destruction du composant\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;uBAAbC,mBAAA,CAAoB,OAApBC,UAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}