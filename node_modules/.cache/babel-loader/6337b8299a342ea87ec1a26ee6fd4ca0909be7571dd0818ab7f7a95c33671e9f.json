{"ast":null,"code":"import L from \"leaflet\";\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n      categories: [\"Beef\", \"Chicken\", \"Dessert\", \"Lamb\", \"Miscellaneous\", \"Pasta\", \"Pork\", \"Seafood\", \"Side\", \"Starter\", \"Vegan\", \"Vegetarian\", \"Breakfast\", \"Goat\"]\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchMealsByCategories();\n  },\n  methods: {\n    async fetchMealsByCategories() {\n      try {\n        const promises = this.categories.map(category => this.fetchMealsByCategory(category));\n        await Promise.all(promises);\n      } catch (error) {\n        console.error(\"Error fetching meals by categories:\", error);\n      }\n    },\n    async fetchMealsByCategory(category) {\n      try {\n        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`);\n        const {\n          meals\n        } = await response.json();\n        await Promise.all(meals.map(meal => this.displayMeal(meal)));\n      } catch (error) {\n        console.error(`Error fetching meals for category ${category}:`, error);\n      }\n    },\n    async displayMeal(meal) {\n      const {\n        strMeal,\n        strMealThumb\n      } = meal;\n      const mealCountry = await this.fetchMealCountry(strMeal);\n      const countryName = this.convertToCountry(mealCountry);\n      console.log(`Country for ${strMeal}:`, countryName);\n      const countryCoordinates = await this.fetchCountryCoordinates(countryName);\n      console.log(`Coordinates for ${strMeal}:`, countryCoordinates);\n      if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n        const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\n        const markerIcon = L.icon({\n          iconUrl: strMealThumb,\n          iconSize: [40, 40],\n          iconAnchor: [20, 40],\n          popupAnchor: [0, -40]\n        });\n        L.marker(mealLocation, {\n          icon: markerIcon\n        }).addTo(this.map).bindPopup(`<div class=\"meal-details\">\n              <img class=\"meal-image\" src=\"${strMealThumb}\" alt=\"${strMeal}\">\n              <div>\n                <p class =\"meal-name\">${strMeal}</p>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.</p>\n              </div>\n            </div>`);\n      }\n    },\n    async fetchMealCountry(mealName) {\n      try {\n        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${mealName}`);\n        const {\n          meals\n        } = await response.json();\n        if (meals && meals.length > 0) {\n          return meals[0].strArea;\n        } else {\n          throw new Error(\"Meal country not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching meal country:\", error);\n        return \"\";\n      }\n    },\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          return {\n            latlng: [lat, lon]\n          };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return {\n          latlng: [0, 0]\n        };\n      }\n    },\n    convertToCountry(origin) {\n      const countryMap = {\n        Italian: \"Italy\",\n        American: \"United States\",\n        Polish: \"Poland\",\n        British: \"United Kingdom\",\n        Canadian: \"Canada\",\n        Chinese: \"China\",\n        Dutch: \"Netherlands\",\n        Egyptian: \"Egypt\",\n        French: \"France\",\n        Greek: \"Greece\",\n        Indian: \"India\",\n        Irish: \"Ireland\",\n        Jamaican: \"Jamaica\",\n        Japanese: \"Japan\",\n        Kenyan: \"Kenya\",\n        Malaysian: \"Malaysia\",\n        Mexican: \"Mexico\",\n        Moroccan: \"Morocco\",\n        Russian: \"Russia\",\n        Spanish: \"Spain\",\n        Thai: \"Thailand\",\n        Turkish: \"Turkey\",\n        Vietnamese: \"Vietnam\",\n        Argentine: \"Argentina\",\n        Australian: \"Australia\",\n        Austrian: \"Austria\",\n        Belgian: \"Belgium\",\n        Brazilian: \"Brazil\",\n        Caribbean: \"Caribbean\",\n        Colombian: \"Colombia\",\n        Cuban: \"Cuba\",\n        Danish: \"Denmark\",\n        Finnish: \"Finland\",\n        German: \"Germany\",\n        Hungarian: \"Hungary\",\n        Indonesian: \"Indonesia\",\n        Israeli: \"Israel\",\n        Lithuanian: \"Lithuania\",\n        Maltese: \"Malta\",\n        Norwegian: \"Norway\",\n        Portuguese: \"Portugal\",\n        SaudiArabian: \"Saudi Arabia\",\n        Singaporean: \"Singapore\",\n        Slovenian: \"Slovenia\",\n        SouthAfrican: \"South Africa\",\n        Swedish: \"Sweden\",\n        Swiss: \"Switzerland\",\n        Ukrainian: \"Ukraine\",\n        Uzbekistani: \"Uzbekistan\"\n        // Ajoutez d'autres origines et leurs pays correspondants ici\n      };\n      return countryMap[origin] || origin;\n    },\n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [[-90, -180], [90, 180]],\n        maxBoundsViscosity: 1.0\n      });\n      L.tileLayer(\"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\", {\n        attribution: 'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 18,\n        accessToken: \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\"\n      }).addTo(this.map);\n    }\n  }\n};","map":{"version":3,"names":["L","name","data","meals","categories","mounted","initMap","fetchMealsByCategories","methods","promises","map","category","fetchMealsByCategory","Promise","all","error","console","response","fetch","json","meal","displayMeal","strMeal","strMealThumb","mealCountry","fetchMealCountry","countryName","convertToCountry","log","countryCoordinates","fetchCountryCoordinates","latlng","mealLocation","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","addTo","bindPopup","mealName","length","strArea","Error","lat","lon","origin","countryMap","Italian","American","Polish","British","Canadian","Chinese","Dutch","Egyptian","French","Greek","Indian","Irish","Jamaican","Japanese","Kenyan","Malaysian","Mexican","Moroccan","Russian","Spanish","Thai","Turkish","Vietnamese","Argentine","Australian","Austrian","Belgian","Brazilian","Caribbean","Colombian","Cuban","Danish","Finnish","German","Hungarian","Indonesian","Israeli","Lithuanian","Maltese","Norwegian","Portuguese","SaudiArabian","Singaporean","Slovenian","SouthAfrican","Swedish","Swiss","Ukrainian","Uzbekistani","center","zoom","minZoom","maxBounds","maxBoundsViscosity","tileLayer","attribution","maxZoom","accessToken"],"sources":["/home/mohamed/code/Gourmet_Atlas-Project/Gourmet_Atlas-Project/src/App.vue"],"sourcesContent":["<template>\n  <header>\n    <img src=\"../public/logo.png\" alt=\"\" class=\"logo\">\n  </header>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport L from \"leaflet\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      meals: [],\n      categories: [\n        \"Beef\",\n        \"Chicken\",\n        \"Dessert\",\n        \"Lamb\",\n        \"Miscellaneous\",\n        \"Pasta\",\n        \"Pork\",\n        \"Seafood\",\n        \"Side\",\n        \"Starter\",\n        \"Vegan\",\n        \"Vegetarian\",\n        \"Breakfast\",\n        \"Goat\",\n      ],\n    };\n  },\n  mounted() {\n    this.initMap();\n    this.fetchMealsByCategories();\n  },\n  methods: {\n    async fetchMealsByCategories() {\n      try {\n        const promises = this.categories.map(category => this.fetchMealsByCategory(category));\n        await Promise.all(promises);\n      } catch (error) {\n        console.error(\"Error fetching meals by categories:\", error);\n      }\n    },\n\n    async fetchMealsByCategory(category) {\n      try {\n        const response = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`\n        );\n        const { meals } = await response.json();\n        await Promise.all(meals.map(meal => this.displayMeal(meal)));\n      } catch (error) {\n        console.error(`Error fetching meals for category ${category}:`, error);\n      }\n    },\n\n    async displayMeal(meal) {\n      const { strMeal, strMealThumb } = meal;\n      const mealCountry = await this.fetchMealCountry(strMeal);\n      const countryName = this.convertToCountry(mealCountry);\n      console.log(`Country for ${strMeal}:`, countryName);\n      const countryCoordinates = await this.fetchCountryCoordinates(countryName);\n      console.log(`Coordinates for ${strMeal}:`, countryCoordinates);\n      if (countryCoordinates.latlng[0] !== 0 || countryCoordinates.latlng[1] !== 0) {\n        const mealLocation = [countryCoordinates.latlng[0], countryCoordinates.latlng[1]];\n        const markerIcon = L.icon({\n          iconUrl: strMealThumb,\n          iconSize: [40, 40],\n          iconAnchor: [20, 40],\n          popupAnchor: [0, -40],\n        });\n        L.marker(mealLocation, { icon: markerIcon })\n          .addTo(this.map)\n          .bindPopup(\n            `<div class=\"meal-details\">\n              <img class=\"meal-image\" src=\"${strMealThumb}\" alt=\"${strMeal}\">\n              <div>\n                <p class =\"meal-name\">${strMeal}</p>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ac dapus. Sed at nisl viverra, interdum.</p>\n              </div>\n            </div>`\n          );\n      }\n    },\n\n    async fetchMealCountry(mealName) {\n      try {\n        const response = await fetch(\n          `https://www.themealdb.com/api/json/v1/1/search.php?s=${mealName}`\n        );\n        const { meals } = await response.json();\n        if (meals && meals.length > 0) {\n          return meals[0].strArea;\n        } else {\n          throw new Error(\"Meal country not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching meal country:\", error);\n        return \"\";\n      }\n    },\n\n    async fetchCountryCoordinates(countryName) {\n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&q=${countryName}&limit=1`\n        );\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const { lat, lon } = data[0];\n          return { latlng: [lat, lon] };\n        } else {\n          throw new Error(\"Country coordinates not found or invalid response\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching country coordinates:\", error);\n        return { latlng: [0, 0] };\n      }\n    },\n\n    convertToCountry(origin) {\n      const countryMap = {\n        Italian: \"Italy\",\n        American: \"United States\",\n        Polish: \"Poland\",\n        British: \"United Kingdom\",\n        Canadian: \"Canada\",\n        Chinese: \"China\",\n        Dutch: \"Netherlands\",\n        Egyptian: \"Egypt\",\n        French: \"France\",\n        Greek: \"Greece\",\n        Indian: \"India\",\n        Irish: \"Ireland\",\n        Jamaican: \"Jamaica\",\n        Japanese: \"Japan\",\n        Kenyan: \"Kenya\",\n        Malaysian: \"Malaysia\",\n        Mexican: \"Mexico\",\n        Moroccan: \"Morocco\",\n        Russian: \"Russia\",\n        Spanish: \"Spain\",\n        Thai: \"Thailand\",\n        Turkish: \"Turkey\",\n        Vietnamese: \"Vietnam\",\n        Argentine: \"Argentina\",\n        Australian: \"Australia\",\n        Austrian: \"Austria\",\n        Belgian: \"Belgium\",\n        Brazilian: \"Brazil\",\n        Caribbean: \"Caribbean\",\n        Colombian: \"Colombia\",\n        Cuban: \"Cuba\",\n        Danish: \"Denmark\",\n        Finnish: \"Finland\",\n        German: \"Germany\",\n        Hungarian: \"Hungary\",\n        Indonesian: \"Indonesia\",\n        Israeli: \"Israel\",\n        Lithuanian: \"Lithuania\",\n        Maltese: \"Malta\",\n        Norwegian: \"Norway\",\n        Portuguese: \"Portugal\",\n        SaudiArabian: \"Saudi Arabia\",\n        Singaporean: \"Singapore\",\n        Slovenian: \"Slovenia\",\n        SouthAfrican: \"South Africa\",\n        Swedish: \"Sweden\",\n        Swiss: \"Switzerland\",\n        Ukrainian: \"Ukraine\",\n        Uzbekistani: \"Uzbekistan\",\n        // Ajoutez d'autres origines et leurs pays correspondants ici\n      };\n      return countryMap[origin] || origin;\n    },\n    \n    initMap() {\n      this.map = L.map(\"map\", {\n        center: [0, 0],\n        zoom: 1,\n        minZoom: 2,\n        maxBounds: [\n          [-90, -180],\n          [90, 180],\n        ],\n        maxBoundsViscosity: 1.0,\n      });\n\n      L.tileLayer(\n        \"https://tile.jawg.io/jawg-light/{z}/{x}/{y}.png?access-token={accessToken}\",\n        {\n          attribution:\n            'Map data &copy; <a href=\"https://www.jawg.io/\">Jawg</a> | &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n          maxZoom: 18,\n          accessToken:\n            \"MsXnKTMtfJ4dhKXBU3PqU8FerMf6QB2aMA5Aidw6tLH85H2044dD1FoAtOLlhYey\",\n        }\n      ).addTo(this.map);\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}