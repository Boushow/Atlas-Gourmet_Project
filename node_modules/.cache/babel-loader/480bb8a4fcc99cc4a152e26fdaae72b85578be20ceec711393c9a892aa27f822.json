{"ast":null,"code":"import L from 'leaflet';\nimport axios from 'axios';\nexport default {\n  name: 'App',\n  mounted() {\n    this.initMap();\n    this.fetchDishes();\n  },\n  methods: {\n    initMap() {\n      this.map = L.map('map').setView([0, 0], 2); // Position initiale de la carte\n\n      // Ajout du fond de carte\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(this.map);\n    },\n    async fetchDishes() {\n      try {\n        // Faites une requête à l'API pour récupérer les données des plats\n        const response = await axios.get('URL_DE_L_API_CUISINES');\n\n        // Récupérez les données des plats\n        const dishes = response.data;\n\n        // Placez les marqueurs sur la carte pour chaque plat\n        dishes.forEach(dish => {\n          // Vérifiez si le plat a une localisation\n          if (dish.location) {\n            // Récupérez le nom, l'image et la localisation du plat\n            const name = dish.name;\n            const image = dish.image;\n            const location = [dish.location.latitude, dish.location.longitude];\n\n            // Créez un marqueur avec l'image du plat et placez-le sur la carte\n            const markerIcon = L.icon({\n              iconUrl: image,\n              iconSize: [40, 40],\n              iconAnchor: [20, 40],\n              popupAnchor: [0, -40]\n            });\n            L.marker(location, {\n              icon: markerIcon\n            }).addTo(this.map).bindPopup(`<b>${name}</b><br><img src=\"${image}\" alt=\"${name}\" style=\"max-width: 100px;\">`);\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching dishes:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["L","axios","name","mounted","initMap","fetchDishes","methods","map","setView","tileLayer","attribution","addTo","response","get","dishes","data","forEach","dish","location","image","latitude","longitude","markerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","bindPopup","error","console"],"sources":["C:\\Users\\Mohamed\\Desktop\\code\\Gourmet_Atlas-Project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\"></div>\r\n</template>\r\n\r\n<script>\r\nimport L from 'leaflet';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'App',\r\n  mounted() {\r\n    this.initMap();\r\n    this.fetchDishes();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = L.map('map').setView([0, 0], 2); // Position initiale de la carte\r\n\r\n      // Ajout du fond de carte\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '© OpenStreetMap contributors'\r\n      }).addTo(this.map);\r\n    },\r\n    async fetchDishes() {\r\n      try {\r\n        // Faites une requête à l'API pour récupérer les données des plats\r\n        const response = await axios.get('URL_DE_L_API_CUISINES');\r\n\r\n        // Récupérez les données des plats\r\n        const dishes = response.data;\r\n\r\n        // Placez les marqueurs sur la carte pour chaque plat\r\n        dishes.forEach(dish => {\r\n          // Vérifiez si le plat a une localisation\r\n          if (dish.location) {\r\n            // Récupérez le nom, l'image et la localisation du plat\r\n            const name = dish.name;\r\n            const image = dish.image;\r\n            const location = [dish.location.latitude, dish.location.longitude];\r\n\r\n            // Créez un marqueur avec l'image du plat et placez-le sur la carte\r\n            const markerIcon = L.icon({\r\n              iconUrl: image,\r\n              iconSize: [40, 40],\r\n              iconAnchor: [20, 40],\r\n              popupAnchor: [0, -40]\r\n            });\r\n\r\n            L.marker(location, { icon: markerIcon })\r\n              .addTo(this.map)\r\n              .bindPopup(`<b>${name}</b><br><img src=\"${image}\" alt=\"${name}\" style=\"max-width: 100px;\">`);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching dishes:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#map {\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n</style>\r\n"],"mappings":"AAKA,OAAOA,CAAA,MAAO,SAAS;AACvB,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;IACd,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPF,OAAOA,CAAA,EAAG;MACR,IAAI,CAACG,GAAE,GAAIP,CAAC,CAACO,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;;MAE5C;MACAR,CAAC,CAACS,SAAS,CAAC,oDAAoD,EAAE;QAChEC,WAAW,EAAE;MACf,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAACJ,GAAG,CAAC;IACpB,CAAC;IACD,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF;QACA,MAAMO,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,uBAAuB,CAAC;;QAEzD;QACA,MAAMC,MAAK,GAAIF,QAAQ,CAACG,IAAI;;QAE5B;QACAD,MAAM,CAACE,OAAO,CAACC,IAAG,IAAK;UACrB;UACA,IAAIA,IAAI,CAACC,QAAQ,EAAE;YACjB;YACA,MAAMhB,IAAG,GAAIe,IAAI,CAACf,IAAI;YACtB,MAAMiB,KAAI,GAAIF,IAAI,CAACE,KAAK;YACxB,MAAMD,QAAO,GAAI,CAACD,IAAI,CAACC,QAAQ,CAACE,QAAQ,EAAEH,IAAI,CAACC,QAAQ,CAACG,SAAS,CAAC;;YAElE;YACA,MAAMC,UAAS,GAAItB,CAAC,CAACuB,IAAI,CAAC;cACxBC,OAAO,EAAEL,KAAK;cACdM,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;cAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;cACpBC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;YACtB,CAAC,CAAC;YAEF3B,CAAC,CAAC4B,MAAM,CAACV,QAAQ,EAAE;cAAEK,IAAI,EAAED;YAAW,CAAC,EACpCX,KAAK,CAAC,IAAI,CAACJ,GAAG,EACdsB,SAAS,CAAE,MAAK3B,IAAK,qBAAoBiB,KAAM,UAASjB,IAAK,8BAA6B,CAAC;UAChG;QACF,CAAC,CAAC;MACJ,EAAE,OAAO4B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}